"""add bank and status to payment

Revision ID: 1562100f91e3
Revises: 
Create Date: 2025-05-15 10:21:39.848017

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1562100f91e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_master_profiles_category_id', table_name='master_profiles')
    op.drop_index('idx_master_profiles_city', table_name='master_profiles')
    op.drop_index('idx_master_profiles_rating', table_name='master_profiles')
    op.drop_table('master_profiles')
    op.drop_index('idx_moderation_logs_admin_id', table_name='moderation_logs')
    op.drop_index('idx_moderation_logs_entity_id', table_name='moderation_logs')
    op.drop_index('idx_moderation_logs_entity_type', table_name='moderation_logs')
    op.drop_table('moderation_logs')
    op.drop_table('faq')
    op.drop_index('idx_advertisements_advertiser_id', table_name='advertisements')
    op.drop_index('idx_advertisements_boost_priority', table_name='advertisements')
    op.drop_index('idx_advertisements_package_id', table_name='advertisements')
    op.drop_table('advertisements')
    op.drop_index('idx_complaints_reported_id', table_name='complaints')
    op.drop_index('idx_complaints_reporter_id', table_name='complaints')
    op.drop_index('idx_complaints_status', table_name='complaints')
    op.drop_table('complaints')
    op.drop_index('idx_package_subscriptions_master_id', table_name='package_subscriptions')
    op.drop_index('idx_package_subscriptions_package_id', table_name='package_subscriptions')
    op.drop_table('package_subscriptions')
    op.drop_table('client_profiles')
    op.drop_table('app_settings')
    op.drop_index('idx_secure_payments_client_id', table_name='secure_payments')
    op.drop_index('idx_secure_payments_master_id', table_name='secure_payments')
    op.drop_index('idx_secure_payments_order_id', table_name='secure_payments')
    op.drop_index('idx_secure_payments_status', table_name='secure_payments')
    op.drop_table('secure_payments')
    op.drop_index('idx_reviews_client_id', table_name='reviews')
    op.drop_index('idx_reviews_master_id', table_name='reviews')
    op.drop_index('idx_reviews_order_id', table_name='reviews')
    op.drop_table('reviews')
    op.drop_index('idx_assigned_masters_master_id', table_name='assigned_masters')
    op.drop_index('idx_assigned_masters_order_id', table_name='assigned_masters')
    op.drop_table('assigned_masters')
    op.drop_index('idx_master_portfolio_master_id', table_name='master_portfolio')
    op.drop_table('master_portfolio')
    op.add_column('categories', sa.Column('name', sa.String(), nullable=False))
    op.drop_constraint('categories_name_en_key', 'categories', type_='unique')
    op.drop_constraint('categories_name_kz_key', 'categories', type_='unique')
    op.drop_constraint('categories_name_ru_key', 'categories', type_='unique')
    op.drop_index('idx_categories_name_en', table_name='categories')
    op.drop_index('idx_categories_name_kz', table_name='categories')
    op.drop_index('idx_categories_name_ru', table_name='categories')
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_unique_constraint(None, 'categories', ['name'])
    op.drop_column('categories', 'name_kz')
    op.drop_column('categories', 'name_ru')
    op.drop_column('categories', 'name_en')
    op.add_column('chat_messages', sa.Column('message', sa.Text(), nullable=False))
    op.add_column('chat_messages', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.alter_column('chat_messages', 'order_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('idx_chat_messages_order_id', table_name='chat_messages')
    op.drop_index('idx_chat_messages_receiver_id', table_name='chat_messages')
    op.drop_index('idx_chat_messages_sender_id', table_name='chat_messages')
    op.create_index(op.f('ix_chat_messages_id'), 'chat_messages', ['id'], unique=False)
    op.drop_constraint('chat_messages_order_id_fkey', 'chat_messages', type_='foreignkey')
    op.drop_constraint('chat_messages_sender_id_fkey', 'chat_messages', type_='foreignkey')
    op.drop_constraint('chat_messages_receiver_id_fkey', 'chat_messages', type_='foreignkey')
    op.create_foreign_key(None, 'chat_messages', 'orders', ['order_id'], ['id'])
    op.create_foreign_key(None, 'chat_messages', 'users', ['sender_id'], ['id'])
    op.create_foreign_key(None, 'chat_messages', 'users', ['receiver_id'], ['id'])
    op.drop_column('chat_messages', 'timestamp')
    op.drop_column('chat_messages', 'message_text')
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.add_column('orders', sa.Column('master_id', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('orders', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('orders', sa.Column('completed_at', sa.DateTime(), nullable=True))
    op.add_column('orders', sa.Column('cancelled_at', sa.DateTime(), nullable=True))
    op.alter_column('orders', 'address',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('orders', 'order_date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    
    # Удаляем default, меняем тип, и ставим новый default
    op.execute("ALTER TABLE orders ALTER COLUMN status DROP DEFAULT")
    op.execute("ALTER TABLE orders ALTER COLUMN status TYPE orderstatus USING status::orderstatus")
    op.execute("ALTER TABLE orders ALTER COLUMN status SET DEFAULT 'pending'")


    op.drop_index('idx_orders_category_id', table_name='orders')
    op.drop_index('idx_orders_city', table_name='orders')
    op.drop_index('idx_orders_client_id', table_name='orders')
    op.drop_index('idx_orders_status', table_name='orders')
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.drop_constraint('orders_category_id_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_client_id_fkey', 'orders', type_='foreignkey')
    op.create_foreign_key(None, 'orders', 'categories', ['category_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'users', ['master_id'], ['id'])
    op.create_foreign_key(None, 'orders', 'users', ['client_id'], ['id'])
    op.drop_column('orders', 'phone_number')
    op.drop_column('orders', 'photo_url')
    op.add_column('payments', sa.Column('bank', sa.String(), nullable=False))
    op.add_column('payments', sa.Column('status', sa.String(), nullable=True))
    op.alter_column('payments', 'duration_days',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('payments', 'end_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.create_index(op.f('ix_ratings_id'), 'ratings', ['id'], unique=False)

    op.add_column('users', sa.Column('password', sa.String(), nullable=True))
    op.execute("UPDATE users SET password = 'temp_password' WHERE password IS NULL")
    op.alter_column('users', 'password', nullable=False)



    op.add_column('users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('about_me', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('photo_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('category_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('city', sa.String(), nullable=True))
    op.alter_column('users', 'phone_number',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.drop_index('idx_users_email', table_name='users')
    op.drop_index('idx_users_phone_number', table_name='users')
    op.drop_index('idx_users_user_type', table_name='users')
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_iin_key', 'users', type_='unique')
    op.drop_constraint('users_phone_number_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.drop_column('users', 'iin')
    op.drop_column('users', 'device_id')
    op.drop_column('users', 'email')
    op.drop_column('users', 'is_blocked')
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'agreement_accepted')
    op.drop_column('users', 'language')
    op.drop_column('users', 'last_login')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('language', sa.VARCHAR(length=5), server_default=sa.text("'ru'::character varying"), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('agreement_accepted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_blocked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('device_id', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('iin', sa.VARCHAR(length=12), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.create_unique_constraint('users_phone_number_key', 'users', ['phone_number'])
    op.create_unique_constraint('users_iin_key', 'users', ['iin'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.create_index('idx_users_user_type', 'users', ['user_type'], unique=False)
    op.create_index('idx_users_phone_number', 'users', ['phone_number'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.alter_column('users', 'phone_number',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_column('users', 'city')
    op.drop_column('users', 'category_id')
    op.drop_column('users', 'photo_url')
    op.drop_column('users', 'about_me')
    op.drop_column('users', 'full_name')
    op.drop_column('users', 'password')
    op.drop_index(op.f('ix_ratings_id'), table_name='ratings')
    op.alter_column('payments', 'end_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('payments', 'duration_days',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('payments', 'status')
    op.drop_column('payments', 'bank')
    op.add_column('orders', sa.Column('photo_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.create_foreign_key('orders_client_id_fkey', 'orders', 'users', ['client_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('orders_category_id_fkey', 'orders', 'categories', ['category_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.create_index('idx_orders_status', 'orders', ['status'], unique=False)
    op.create_index('idx_orders_client_id', 'orders', ['client_id'], unique=False)
    op.create_index('idx_orders_city', 'orders', ['city'], unique=False)
    op.create_index('idx_orders_category_id', 'orders', ['category_id'], unique=False)
    op.alter_column('orders', 'status',
               existing_type=sa.Enum('pending', 'in_progress', 'completed', 'cancelled', name='orderstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'new'::character varying"))
    op.alter_column('orders', 'order_date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.alter_column('orders', 'address',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.drop_column('orders', 'cancelled_at')
    op.drop_column('orders', 'completed_at')
    op.drop_column('orders', 'longitude')
    op.drop_column('orders', 'latitude')
    op.drop_column('orders', 'master_id')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.add_column('chat_messages', sa.Column('message_text', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('chat_messages', sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'chat_messages', type_='foreignkey')
    op.drop_constraint(None, 'chat_messages', type_='foreignkey')
    op.drop_constraint(None, 'chat_messages', type_='foreignkey')
    op.create_foreign_key('chat_messages_receiver_id_fkey', 'chat_messages', 'users', ['receiver_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('chat_messages_sender_id_fkey', 'chat_messages', 'users', ['sender_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('chat_messages_order_id_fkey', 'chat_messages', 'orders', ['order_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_chat_messages_id'), table_name='chat_messages')
    op.create_index('idx_chat_messages_sender_id', 'chat_messages', ['sender_id'], unique=False)
    op.create_index('idx_chat_messages_receiver_id', 'chat_messages', ['receiver_id'], unique=False)
    op.create_index('idx_chat_messages_order_id', 'chat_messages', ['order_id'], unique=False)
    op.alter_column('chat_messages', 'order_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('chat_messages', 'created_at')
    op.drop_column('chat_messages', 'message')
    op.add_column('categories', sa.Column('name_en', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('categories', sa.Column('name_ru', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('categories', sa.Column('name_kz', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'categories', type_='unique')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.create_index('idx_categories_name_ru', 'categories', ['name_ru'], unique=False)
    op.create_index('idx_categories_name_kz', 'categories', ['name_kz'], unique=False)
    op.create_index('idx_categories_name_en', 'categories', ['name_en'], unique=False)
    op.create_unique_constraint('categories_name_ru_key', 'categories', ['name_ru'])
    op.create_unique_constraint('categories_name_kz_key', 'categories', ['name_kz'])
    op.create_unique_constraint('categories_name_en_key', 'categories', ['name_en'])
    op.drop_column('categories', 'name')
    op.create_table('master_portfolio',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('master_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('photo_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('upload_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['master_id'], ['users.id'], name='master_portfolio_master_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='master_portfolio_pkey')
    )
    op.create_index('idx_master_portfolio_master_id', 'master_portfolio', ['master_id'], unique=False)
    op.create_table('assigned_masters',
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('master_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assignment_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completion_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.CheckConstraint("completion_status::text = ANY (ARRAY['completed'::character varying, 'not_completed'::character varying]::text[])", name='assigned_masters_completion_status_check'),
    sa.ForeignKeyConstraint(['master_id'], ['users.id'], name='assigned_masters_master_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='assigned_masters_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('order_id', 'master_id', name='assigned_masters_pkey')
    )
    op.create_index('idx_assigned_masters_order_id', 'assigned_masters', ['order_id'], unique=False)
    op.create_index('idx_assigned_masters_master_id', 'assigned_masters', ['master_id'], unique=False)
    op.create_table('reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('master_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='reviews_rating_check'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='reviews_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['master_id'], ['users.id'], name='reviews_master_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='reviews_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reviews_pkey')
    )
    op.create_index('idx_reviews_order_id', 'reviews', ['order_id'], unique=False)
    op.create_index('idx_reviews_master_id', 'reviews', ['master_id'], unique=False)
    op.create_index('idx_reviews_client_id', 'reviews', ['client_id'], unique=False)
    op.create_table('secure_payments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('master_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('admin_decision', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('admin_comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'rejected'::character varying, 'refunded'::character varying]::text[])", name='secure_payments_status_check'),
    sa.ForeignKeyConstraint(['client_id'], ['users.id'], name='secure_payments_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['master_id'], ['users.id'], name='secure_payments_master_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='secure_payments_order_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='secure_payments_pkey')
    )
    op.create_index('idx_secure_payments_status', 'secure_payments', ['status'], unique=False)
    op.create_index('idx_secure_payments_order_id', 'secure_payments', ['order_id'], unique=False)
    op.create_index('idx_secure_payments_master_id', 'secure_payments', ['master_id'], unique=False)
    op.create_index('idx_secure_payments_client_id', 'secure_payments', ['client_id'], unique=False)
    op.create_table('app_settings',
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('key', name='app_settings_pkey')
    )
    op.create_table('client_profiles',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='client_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name='client_profiles_pkey')
    )
    op.create_table('package_subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('master_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('remaining_boosts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_boost_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['master_id'], ['users.id'], name='package_subscriptions_master_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['package_id'], ['paid_packages.id'], name='package_subscriptions_package_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='package_subscriptions_pkey')
    )
    op.create_index('idx_package_subscriptions_package_id', 'package_subscriptions', ['package_id'], unique=False)
    op.create_index('idx_package_subscriptions_master_id', 'package_subscriptions', ['master_id'], unique=False)
    op.create_table('complaints',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('reporter_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reported_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('complaint_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'new'::character varying"), autoincrement=False, nullable=True),
    sa.Column('admin_comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['new'::character varying, 'in_progress'::character varying, 'resolved'::character varying, 'rejected'::character varying]::text[])", name='complaints_status_check'),
    sa.ForeignKeyConstraint(['reported_id'], ['users.id'], name='complaints_reported_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reporter_id'], ['users.id'], name='complaints_reporter_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='complaints_pkey')
    )
    op.create_index('idx_complaints_status', 'complaints', ['status'], unique=False)
    op.create_index('idx_complaints_reporter_id', 'complaints', ['reporter_id'], unique=False)
    op.create_index('idx_complaints_reported_id', 'complaints', ['reported_id'], unique=False)
    op.create_table('paid_packages',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('paid_packages_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('boosts_per_day', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('duration_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='paid_packages_pkey'),
    sa.UniqueConstraint('name', name='paid_packages_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('advertisements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('advertiser_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('advertiser_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('photo_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('link_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('boost_priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_displayed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint("advertiser_type::text = ANY (ARRAY['specialist'::character varying, 'store'::character varying, 'company'::character varying]::text[])", name='advertisements_advertiser_type_check'),
    sa.ForeignKeyConstraint(['advertiser_id'], ['users.id'], name='advertisements_advertiser_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['package_id'], ['paid_packages.id'], name='advertisements_package_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='advertisements_pkey')
    )
    op.create_index('idx_advertisements_package_id', 'advertisements', ['package_id'], unique=False)
    op.create_index('idx_advertisements_boost_priority', 'advertisements', ['boost_priority'], unique=False)
    op.create_index('idx_advertisements_advertiser_id', 'advertisements', ['advertiser_id'], unique=False)
    op.create_table('faq',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question_kz', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_ru', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('question_en', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer_kz', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer_ru', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer_en', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='faq_pkey')
    )
    op.create_table('moderation_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name='moderation_logs_admin_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='moderation_logs_pkey')
    )
    op.create_index('idx_moderation_logs_entity_type', 'moderation_logs', ['entity_type'], unique=False)
    op.create_index('idx_moderation_logs_entity_id', 'moderation_logs', ['entity_id'], unique=False)
    op.create_index('idx_moderation_logs_admin_id', 'moderation_logs', ['admin_id'], unique=False)
    op.create_table('master_profiles',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('about_me', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('photo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('review_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='master_profiles_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='master_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name='master_profiles_pkey')
    )
    op.create_index('idx_master_profiles_rating', 'master_profiles', ['rating'], unique=False)
    op.create_index('idx_master_profiles_city', 'master_profiles', ['city'], unique=False)
    op.create_index('idx_master_profiles_category_id', 'master_profiles', ['category_id'], unique=False)
    # ### end Alembic commands ###
