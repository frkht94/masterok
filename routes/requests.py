from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form
from sqlalchemy.orm import Session
from typing import List, Optional
from db.database import get_db
from models.request import ClientRequest, RequestResponse
from core.dependencies import get_current_user
from models.user import User
from models.notification import Notification
from datetime import datetime
import shutil
import uuid
import os
from sqlalchemy import and_
from dateutil import parser
import asyncio

from services.push import send_push_notification
from services.moderation import contains_bad_words
from services.image_moderation import is_inappropriate_image_by_url

router = APIRouter(prefix="/requests", tags=["–ó–∞—è–≤–∫–∏"])

MEDIA_DIR = "media"
os.makedirs(MEDIA_DIR, exist_ok=True)

def get_image_url_local(filename: str) -> str:
    # –ü—Ä–∏–º–µ—Ä ‚Äî –Ω–∞ –ø—Ä–æ–¥–µ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—ã–π URL –≤–∏–¥–∞: https://mydomain.kz/media/filename
    return f"http://localhost:8000/media/{filename}"


@router.post("/create", response_model=RequestResponse)
async def create_request(
    category_id: int = Form(...),
    city: str = Form(...),
    address: str = Form(...),
    scheduled_date: str = Form(...),
    description: str = Form(..., min_length=20),
    phone_number: str = Form(...),
    file: Optional[UploadFile] = File(None),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    if contains_bad_words(description):
        raise HTTPException(status_code=400, detail="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")

    # üìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        scheduled_dt = parser.isoparse(scheduled_date)
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

    # üñº –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    filename = None
    if file:
        ext = file.filename.split(".")[-1]
        filename = f"{uuid.uuid4()}.{ext}"
        filepath = os.path.join(MEDIA_DIR, filename)

        with open(filepath, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        file.file.close()

        image_url = get_image_url_local(filename)
        if is_inappropriate_image_by_url(image_url):
            os.remove(filepath)
            raise HTTPException(status_code=400, detail="–§–æ—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫
    today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
    requests_today = db.query(ClientRequest).filter(
        and_(
            ClientRequest.client_id == current_user.id,
            ClientRequest.created_at >= today_start
        )
    ).count()

    if requests_today >= 5:
        raise HTTPException(
            status_code=402,
            detail="‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (5 –≤ –¥–µ–Ω—å). –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –ø–ª–∞—Ç–Ω–∞—è: 350‚Ç∏"
        )

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    request = ClientRequest(
        client_id=current_user.id,
        category_id=category_id,
        city=city,
        address=address,
        scheduled_date=scheduled_dt,
        description=description,
        photo_url=f"/media/{filename}" if filename else None,
        phone_number=phone_number
    )

    db.add(request)

    # üîî –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    matching_masters = db.query(User).filter(
        User.user_type == "master",
        User.city == city,
        User.category_id == category_id,
        User.is_verified == True
    ).all()

    for master in matching_masters:
        db.add(Notification(
            user_id=master.id,
            message=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {description[:30]}... ({city})"
        ))
        if master.device_token:
            await asyncio.sleep(0)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É event loop
            await send_push_notification(
                master.device_token,
                "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
                f"{description[:30]}... ({city})"
            )

    db.commit()
    db.refresh(request)

    return request


@router.get("/", response_model=List[RequestResponse])
def list_requests(
    db: Session = Depends(get_db),
    category_id: Optional[int] = None,
    city: Optional[str] = None
):
    query = db.query(ClientRequest)
    if category_id:
        query = query.filter(ClientRequest.category_id == category_id)
    if city:
        query = query.filter(ClientRequest.city.ilike(f"%{city}%"))
    return query.order_by(ClientRequest.created_at.desc()).all()
