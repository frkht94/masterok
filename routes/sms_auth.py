from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from random import randint
from db.database import get_db
from models.sms_code import SMSCode, RequestSMSCode, VerifySMSCode, ForgotPasswordRequest, ForgotPasswordConfirm
from models.user import User
from passlib.context import CryptContext
import os

router = APIRouter(prefix="/auth", tags=["Auth (SMS)"])

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

@router.post("/request-code")
async def request_code(data: RequestSMSCode, db: Session = Depends(get_db)):
    phone = data.phone_number
    existing_user = db.query(User).filter(User.phone_number == phone).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    code = str(randint(1000, 9999))
    expires = datetime.utcnow() + timedelta(minutes=5)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
    sms_entry = SMSCode(phone_number=phone, code=code, expires_at=expires)
    db.add(sms_entry)
    db.commit()

    # –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"üì® SMS-–∫–æ–¥ –¥–ª—è {phone}: {code}")

    return {"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}


@router.post("/verify-code")
async def verify_code(data: VerifySMSCode, db: Session = Depends(get_db)):
    code_entry = (
        db.query(SMSCode)
        .filter(SMSCode.phone_number == data.phone_number)
        .order_by(SMSCode.created_at.desc())
        .first()
    )

    if not code_entry or code_entry.code != data.code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")

    if code_entry.expires_at < datetime.utcnow():
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç—ë–∫")

    # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    db.query(SMSCode).filter(SMSCode.phone_number == data.phone_number).delete()
    db.commit()

    return {"message": "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."}


@router.post("/forgot-password/request")
async def forgot_password_request(data: ForgotPasswordRequest, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.phone_number == data.phone_number).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    code = str(randint(1000, 9999))
    expires = datetime.utcnow() + timedelta(minutes=5)

    sms_entry = SMSCode(phone_number=data.phone_number, code=code, expires_at=expires)
    db.add(sms_entry)
    db.commit()

    print(f"üì® –ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è {data.phone_number}: {code}")
    return {"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}

@router.post("/forgot-password/confirm")
async def forgot_password_confirm(data: ForgotPasswordConfirm, db: Session = Depends(get_db)):
    code_entry = (
        db.query(SMSCode)
        .filter(SMSCode.phone_number == data.phone_number)
        .order_by(SMSCode.created_at.desc())
        .first()
    )

    if not code_entry or code_entry.code != data.code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")

    if code_entry.expires_at < datetime.utcnow():
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç—ë–∫")

    user = db.query(User).filter(User.phone_number == data.phone_number).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    hashed_password = pwd_context.hash(data.new_password)
    user.password = hashed_password

    # —É–¥–∞–ª—è–µ–º –∫–æ–¥—ã
    db.query(SMSCode).filter(SMSCode.phone_number == data.phone_number).delete()
    db.commit()

    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"}