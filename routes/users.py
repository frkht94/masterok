from slowapi import Limiter
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from fastapi import APIRouter, Depends, HTTPException, Query, Request
from sqlalchemy.orm import Session, joinedload
from passlib.hash import bcrypt
from datetime import timedelta, datetime
from db.database import get_db
from core.dependencies import create_access_token, get_current_user
from models.user import User, UserRegistration, UserLogin, ClientProfileUpdate, MasterProfileUpdate, UserResponse
from models.sms_code import SMSCode
from models.payment import Payment
from typing import List, Optional
from sqlalchemy import and_
from services.moderation import contains_bad_words
from core.rate_limiter import limiter


router = APIRouter(
    prefix="/users",
    tags=["Users"]
)

ACCESS_TOKEN_EXPIRE_MINUTES = 30


@router.post("/register")
@limiter.limit("3/minute")  # üëà –º–∞–∫—Å–∏–º—É–º 3 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
async def register_user(user: UserRegistration, request: Request, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    existing_device = db.query(User).filter(User.device_id == user.device_id).first()
    if existing_device:
        raise HTTPException(status_code=400, detail="–° —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")

    if not user.agreed_to_terms:
        raise HTTPException(status_code=400, detail="–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    verified = (
        db.query(SMSCode)
        .filter(SMSCode.phone_number == user.phone_number)
        .order_by(SMSCode.created_at.desc())
        .first()
    )

    if not verified:
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ SMS")

    existing_user = db.query(User).filter(User.phone_number == user.phone_number).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    hashed_password = bcrypt.hash(user.password)
    new_user = User(
        phone_number=user.phone_number,
        password=hashed_password,
        user_type=user.user_type,
        full_name=user.phone_number if user.user_type == "master" else None,
        is_verified=True,
        device_id=user.device_id
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    return {
        "id": new_user.id,
        "phone_number": new_user.phone_number,
        "user_type": new_user.user_type,
        "registration_date": new_user.registration_date,
        "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
    }


@router.post("/login")
@limiter.limit("5/minute")
async def login_user(user: UserLogin, request: Request, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.phone_number == user.phone_number).first()
    if not db_user or not bcrypt.verify(user.password, db_user.password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(data={"sub": str(db_user.id)}, expires_delta=access_token_expires)
    return {"access_token": access_token, "token_type": "bearer"}


@router.get("/protected")
async def protected(current_user: User = Depends(get_current_user)):
    return {"message": f"–≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.phone_number}"}


@router.put("/masters/me")
async def update_master_profile(
    profile_data: MasterProfileUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if current_user.user_type != "master":
        raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–∞—Å—Ç–µ—Ä–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
    for field, value in profile_data.dict(exclude_unset=True).items():
        if isinstance(value, str) and contains_bad_words(value):
            raise HTTPException(status_code=400, detail=f"–ü–æ–ª–µ '{field}' —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")
        setattr(current_user, field, value)

    db.commit()
    db.refresh(current_user)
    return current_user


@router.put("/clients/me")
async def update_client_profile(
    profile_data: ClientProfileUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if current_user.user_type != "client":
        raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞")

    for field, value in profile_data.dict(exclude_unset=True).items():
        setattr(current_user, field, value)

    db.commit()
    db.refresh(current_user)
    return current_user

from sqlalchemy.orm import joinedload
from sqlalchemy import and_

@router.get("/top", response_model=List[UserResponse])
def get_top_masters(
    city: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É"),
    category_id: Optional[int] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    db: Session = Depends(get_db)
):
    now = datetime.utcnow()

    # 1. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã
    expired = db.query(Payment).filter(
        Payment.purpose == "promote",
        Payment.is_active == True,
        Payment.end_date < now
    ).all()
    for payment in expired:
        payment.is_active = False
    db.commit()

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
    query = db.query(User).filter(User.user_type == "master", User.is_verified == True)

    if city:
        query = query.filter(User.city == city)
    if category_id:
        query = query.filter(User.category_id == category_id)

    masters = query.options(joinedload(User.payments)).all()

    # 3. –î–µ–ª–∏–º –Ω–∞ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã—Ö –∏ –æ–±—ã—á–Ω—ã—Ö
    promoted = []
    regular = []

    for user in masters:
        active_payment = any(
            p.purpose == "promote" and p.is_active and p.start_date <= now <= p.end_date
            for p in user.payments
        )
        if active_payment:
            promoted.append(user)
        else:
            regular.append(user)

    # 4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    promoted.sort(key=lambda u: u.last_promoted_at or datetime.min)
    regular.sort(key=lambda u: u.reputation or 0, reverse=True)

    # 5. –û–±–Ω–æ–≤–∏–º last_promoted_at —É –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    if promoted:
        promoted[0].last_promoted_at = now
        db.commit()

    return promoted + regular



