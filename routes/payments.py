from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from datetime import datetime, timedelta

from db.database import get_db
from models.payment import Payment, PaymentCreate, PaymentResponse
from models.user import User
from models.notification import Notification
from core.dependencies import get_current_user

router = APIRouter(prefix="/payments", tags=["–ü–ª–∞—Ç–µ–∂–∏"])

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
PACKAGES = {
    3: {"amount": 1800, "name": "–ü–æ–¥–Ω—è—Ç—å –≤ —Ç–æ–ø 3 —Ä–∞–∑–∞/–¥–µ–Ω—å"},
    5: {"amount": 3250, "name": "–ü–æ–¥–Ω—è—Ç—å –≤ —Ç–æ–ø 5 —Ä–∞–∑/–¥–µ–Ω—å"},
    7: {"amount": 4890, "name": "–ü–æ–¥–Ω—è—Ç—å –≤ —Ç–æ–ø 7 —Ä–∞–∑/–¥–µ–Ω—å"},
}

# ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ (–º–æ–∫-–æ–ø–ª–∞—Ç–∞)
@router.post("/promote")
def promote_master(
    times_per_day: int,
    bank: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.user_type != "master":
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")

    if times_per_day not in PACKAGES:
        raise HTTPException(status_code=400, detail="–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç—ã: 3, 5, 7 —Ä–∞–∑ –≤ –¥–µ–Ω—å")

    if bank not in ["Kaspi", "Halyk", "Forte"]:
        raise HTTPException(status_code=400, detail="–ë–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: Kaspi, Halyk –∏–ª–∏ Forte")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
    active_payment = db.query(Payment).filter(
        Payment.user_id == current_user.id,
        Payment.purpose == "promote",
        Payment.is_active == True,
        Payment.end_date >= datetime.utcnow()
    ).first()

    if active_payment:
        raise HTTPException(status_code=400, detail="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    package = PACKAGES[times_per_day]
    payment = Payment(
        user_id=current_user.id,
        package_name=package["name"],
        times_per_day=times_per_day,
        duration_days=30,
        amount=package["amount"],
        purpose="promote",
        bank=bank,
        status="pending",
        is_active=False
    )
    db.add(payment)
    db.commit()
    db.refresh(payment)

    return {
        "payment_id": payment.id,
        "amount": payment.amount,
        "bank": bank,
        "message": f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ /payments/confirm/{payment.id}"
    }

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–º–∞—Å—Ç–µ—Ä –≤—Ä—É—á–Ω—É—é –Ω–∞–∂–∏–º–∞–µ—Ç)
@router.post("/confirm/{payment_id}")
def confirm_payment(
    payment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    payment = db.query(Payment).filter(
        Payment.id == payment_id,
        Payment.user_id == current_user.id
    ).first()

    if not payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if payment.status == "paid":
        return {"message": "–ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    now = datetime.utcnow()
    payment.status = "paid"
    payment.start_date = now
    payment.end_date = now + timedelta(days=30)
    payment.is_active = True

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Å—Ç–µ—Ä–∞
    current_user.is_promoted = True
    current_user.promotion_expiration = payment.end_date
    current_user.promote_times_per_day = payment.times_per_day
    current_user.promote_today_used = 0

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    db.add(Notification(
        user_id=current_user.id,
        message="üéØ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è –≤ –¢–û–ü"
    ))

    db.commit()
    return {"message": "–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"}

# ‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—è–≤–∫—É (–ø–æ—Å–ª–µ 5 –≤ –¥–µ–Ω—å)
@router.post("/extra-request")
def pay_for_extra_request(
    bank: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.user_type != "client":
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞—è–≤–∫—É")

    if bank not in ["Kaspi", "Halyk", "Forte"]:
        raise HTTPException(status_code=400, detail="–ë–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: Kaspi, Halyk –∏–ª–∏ Forte")

    # –ü–ª–∞—Ç—ë–∂
    payment = Payment(
        user_id=current_user.id,
        amount=350,
        purpose="extra_request",
        bank=bank,
        status="paid",
        is_active=True,
        start_date=datetime.utcnow()
    )
    db.add(payment)
    db.commit()

    return {"message": "–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞—è–≤–∫—É –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"}

# ‚úÖ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
@router.post("/create", response_model=PaymentResponse)
def create_payment(
    data: PaymentCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.user_type != "master":
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")

    payment = Payment(
        user_id=current_user.id,
        package_name=data.package_type,
        times_per_day=int(data.package_type),
        duration_days=30,
        amount=data.amount,
        purpose="promote",
        bank=data.bank,
        status="paid",
        is_active=True,
        start_date=datetime.utcnow(),
        end_date=datetime.utcnow() + timedelta(days=30)
    )
    db.add(payment)
    db.commit()
    db.refresh(payment)

    return payment
